# Jib Maven Build and Push Task
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: jib-maven-task
spec:
  description: >-
    This Task builds Java/Kotlin/Groovy/Scala source into a container image
    using Google's Jib tool.

    Jib works with Maven and Gradle projects, and this template is for Maven
    projects.
  params:
    - description: Name of the image to build
      name: IMAGE
      type: string
    - default: >-
        registry.redhat.io/ubi8/openjdk-17@sha256:923b18a62d892ec23b6bbf714ecb237a0a0fa3cd225fbf89d39966dd8d421c72
      description: Maven base image
      name: MAVEN_IMAGE
      type: string
    - default: .
      description: 'The directory containing the app, relative to the source repository root'
      name: DIRECTORY
      type: string
    - default: empty-dir-volume
      description: The name of the volume for caching Maven artifacts and base image layers
      name: CACHE
      type: string
    - default: 'false'
      description: Whether to allow insecure registry
      name: INSECUREREGISTRY
      type: string
    - default: service-ca.crt
      description: CA cert file name for insecure registry service
      name: CACERTFILE
      type: string
    - description: docker username
      name: DOCKER_USERNAME
      type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
  steps:
    - env:
        - name: HOME
          value: /workspace
        - name: DOCKER_CONFIG
          value: $(credentials.path)/.docker/
        - name: DOCKER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DOCKER_PASSWORD
              name: docker-creds
      image: $(params.MAVEN_IMAGE)
      name: build-and-push
      resources: {}
      script: |
        #!/bin/bash

        # Delete the truststore created on exit
        function cleanup {
          rm $(workspaces.source.path)/truststore.jks
        }

        certParams=""

        if [[ -f /tekton-custom-certs/$(params.CACERTFILE) ]]; then
          # create the truststore with existing certs available
          keytool -importkeystore -srckeystore $JAVA_HOME/lib/security/cacerts -srcstoretype JKS -destkeystore $(workspaces.source.path)/truststore.jks -storepass "changeit" -srcstorepass "changeit" > /tmp/logs 2>&1
          if [ $? -ne 0 ]; then
            cat /tmp/logs
            exit 1
          fi
          # add your certs to the new truststore created
          keytool -import -keystore $(workspaces.source.path)/truststore.jks -storepass "changeit" -file /tekton-custom-certs/$(params.CACERTFILE) -noprompt
          # pass truststore details to the mvn command
          certParams="-Djavax.net.ssl.trustStore=$(workspaces.source.path)/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit"
          # clean truststore on exit
          trap cleanup EXIT
        fi

        mvn -B \
          -Duser.home=$HOME \
          -Djib.allowInsecureRegistries=$(params.INSECUREREGISTRY) \
          -Djib.to.image=$(params.IMAGE) \
          -Djib.to.auth.username=$(params.DOCKER_USERNAME) \
          -Djib.to.auth.password=$DOCKER_PASSWORD \
          $certParams \
          compile \
          com.google.cloud.tools:jib-maven-plugin:build
      securityContext:
        runAsUser: 0
      volumeMounts:
        - mountPath: /workspace/.m2
          name: $(params.CACHE)
          subPath: m2-cache
        - mountPath: /workspace/.cache
          name: $(params.CACHE)
          subPath: jib-cache
      workingDir: $(workspaces.source.path)/$(params.DIRECTORY)
    - image: $(params.MAVEN_IMAGE)
      name: digest-to-results
      resources: {}
      script: >-
        cat
        $(workspaces.source.path)/$(params.DIRECTORY)/target/jib-image.digest |
        tee $(results.IMAGE_DIGEST.path)
  volumes:
    - emptyDir: {}
      name: empty-dir-volume
  workspaces:
    - name: source
    - mountPath: /tekton-custom-certs
      name: sslcertdir
      optional: true